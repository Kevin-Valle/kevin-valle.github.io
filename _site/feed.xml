<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS378 Summer 2015&amp;#58; Kevin Valle</title>
    <description>Blog for CS378&amp;#58; Generic Programming and the STL
</description>
    <link>http://kevin-valle.github.io/</link>
    <atom:link href="http://kevin-valle.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Jul 2015 14:33:58 -0700</pubDate>
    <lastBuildDate>Sun, 19 Jul 2015 14:33:58 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Week 6</title>
        <description>&lt;p&gt;Project 4 was due this week. It was by far the hardest project of the class thus far.  Unfortunately, I was in the midst of finding an apartment and my availability suffered as a result. I worked with a partner again for this project and that made writing our implementation easier on the both of us as we would test each other’s logic and reasoning. We were in the lab almost every day trying to make progress.  The main difficulty of this project was that numerous methods depended on other methods so we could not be certain whether tests failed because of the current function or some other function. After a rough week, we finished two days after the deadline, losing two fifths of the possible points.&lt;/p&gt;

&lt;p&gt;The deadline for the final project is quickly approaching. I need to put in extra effort to not lose any more grade points because this could very well be the first computer science class in which I receive an ‘A’. I can foresee many hours working on this project and studying for the upcoming test.&lt;/p&gt;

&lt;p&gt;Tip of the week: I cannot stress the importance of having a local environment that can run tests and code identically to production.  For reasons that I am still trying to figure out, my mac will not build my project locally. This prevents me from running tests. This has also prevented me from working on the bus or away from my desktop at home. Having followed many tutorials and instructions online, the problem still remains and thus I have decided to use a virtual image of an environment that I am certain works instead. While not ideal, I can test changes while away from home and not be dependent on an Internet connection.&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Jul 2015 08:25:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/07/19/week6.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/07/19/week6.html</guid>
        
        
      </item>
    
      <item>
        <title>Week 5</title>
        <description>&lt;p&gt;This week is another short week yet it feels like lecture covered a whole lot of material.  We went over the inner workings of vector in order to fully understand project 4. This meant covering allocators, destructors, constructors, and copy constructors in depth. The material that we go over in lecture is really interesting and makes me appreciate the C++ language. I would highly recommend this class to all my friends.&lt;/p&gt;

&lt;p&gt;Project 4 involves writing our own implementation of deque. The code for vector is really helpful in writing similar methods for deque. With first summer session ending this weekend, I am lucky to be working on this project with a partner who has the same availability. I have heard that this project is more difficult that the previous one so I can expect to spend large amounts of hours working on this. Unfortunately, my weekend was preoccupied with an essay for my government class and therefore I have not started project 4. I hope that my partner can I finish before the deadline.&lt;/p&gt;

&lt;p&gt;Tip of the week: Continue to review the lecture material as the class goes on. I have found that after a few weeks, the intensity at which I keep up with the material declines as the class goes on especially with other classes and an internship. I struggled with quizzes this week. I felt like I knew the general idea of what was covered last lecture but the quizzes necessitated specific pieces of information. A quick review of notes before and after class can refresh and reinforce the material covered in lecture.&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Jul 2015 15:25:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/07/12/week5.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/07/12/week5.html</guid>
        
        
      </item>
    
      <item>
        <title>Week 4</title>
        <description>&lt;p&gt;This week flew by with test #1 and a day off from class. Going over the algorithms listed in the review for test #1 proved to be very useful. Leaving the test room, I felt very confident about how I did and my grade justified that confidence.&lt;/p&gt;

&lt;p&gt;Project 3 is due this coming week. It involves creating an Integer class similar to Java’s BigInteger. This project’s purpose is to reinforce the topics recently covered in class: classes, operators, and iterators. I have chosen to work with a partner for this project seeing as I finally had a clear enough schedule. A partner proved useful when understanding the project because we had someone next to use to help clarify any questions or confusion. Additionally, it always helps to have an extra set of eyes on the monitor looking for any accidental bugs. I happen to be partnering with my brother for this project. I personally know that he has been programming for longer than I have and has more experience which can cause intimidation, but gladly that wasn’t the case. We took turns typing as the other helped develop the logic. We didn’t try to force a solution/IDE/style onto one another which created a feeling of equality. Although we still have quite a bit more work to put into this project, I am confident that it will be smooth sailing from here on out.&lt;/p&gt;

&lt;p&gt;Tip of the week: Program alongside another person at least once and treat it as a learning experience. They are bound to know something that you yourself do not know or understand clearly. Treating each other with respect as developers will make pair programming an enjoyable and productive experience.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 18:30:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/07/04/week4.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/07/04/week4.html</guid>
        
        
      </item>
    
      <item>
        <title>Week 3</title>
        <description>&lt;p&gt;Project 2 was due last week. I was expecting to take at least one late day but I somehow managed to complete it an hour before the deadline. Looking back, planning the implementation and writing tests proved to be the most time consuming elements of the project. This was the first time that I wrote the tests before writing any code and it was HARD. Fortunately, it resulted in less bugs and less frustration than I would have thought. Test Driven Development is definitely something that I am willing to try again and I am sure that it will get easier and more fluid with practice.&lt;/p&gt;

&lt;p&gt;The first test is coming up this week. Even though I have not had trouble following along in lecture, I still need to study. Writing code on paper is much harder than typing on a computer and the time constraint also makes things harder. My priority is going to be iterators and writing the algorithms listed in the study guide.&lt;/p&gt;

&lt;p&gt;Tip of the week: Rather than just copy/pasting a solution from the Internet, try to write out the solution line by line. I don’t quite remember where but I read that to become a better developer, you have to understand every line of code you write before it is run. I have taken those words to heart and learned some pretty neat tricks and tools. Obviously there is a time and a place, especially when there is not deadline, but it proves very useful when kept in mind.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Jun 2015 08:45:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/06/28/week3.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/06/28/week3.html</guid>
        
        
      </item>
    
      <item>
        <title>Week 2</title>
        <description>&lt;p&gt;This week’s lecture involved becoming familiar with some of C++’s unique features such as pointers, references, containers, iterators, and templates. It has been a while since I have used pointers and references so I have to put in a little extra effort when working on the exercises in class. I am not familiar with C++’s containers and iterators so this week’s lecture felt a little over my head but some practice would help alleviate that feeling.&lt;/p&gt;

&lt;p&gt;Professor Downing then introduced and explained the second project, which is similar to the logic of a makefile. At first glance, this project seems simple but the more you look at it, the harder it looks considering the time given to have it completed. That combined with no provided files this time around make this project harder than the last but make it more of a learning experience. Having never written a travis.yml or makefile, I am glad I get to practice with a similar project to reference.&lt;/p&gt;

&lt;p&gt;Tip of the week: One of my biggest pet peeves while working on a project is switching contexts whenever working with issues on Github. Since I am doing most of my development and testing on the command line, I decided to look for a tool that would allow me to create, edit, and close issues on the fly also via the command line. That brings me to &lt;a href=&quot;https://github.com/stephencelis/ghi&quot;&gt;ghi&lt;/a&gt;. Easy configuration and simple commands mean no more switching windows whenever I want to update issues. The only downside that I would mention is that the online documentation provided by ghi’s website and repo is not very clear especially when researching how to run a specific command. However, the help command provides great insight into the many commands available. I look forward to becoming more familiar with this tool and would recommend it to anyone who prefers working with the command line.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2015 10:30:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/06/21/week2.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/06/21/week2.html</guid>
        
        
      </item>
    
      <item>
        <title>Week 1</title>
        <description>&lt;p&gt;This is the first installment of my blog for CS378: Generic Programming and the STL. This class is the third class that I have taken with professor Downing but the first class in which I have attempted to keep up with a blog. I guess the third time is the charm!&lt;/p&gt;

&lt;p&gt;Every day of class begins with  a quiz over assigned readings and the previous lecture. This semester, Downing has moved from paper and pencil quizzes to conducting the quizzes online using Tophat.     Quizzes on Tophat feel no different than the previous paper and pencil quizzes. There are however more multiple     choice questions which are always a pleasure to see. After the quiz, Downing gives his lecture by calling on individual students to read/explain lines of code from the projector. This is by far the most interactive class I have taken. There’s nothing like the “fear” of your name being called next to keep you awake in class. I put fear in     quotations because even if you don’t know the answer to a question that Downing asks, he will work with you to arrive at an answer as best as he can.&lt;/p&gt;

&lt;p&gt;The first full week of class centered on introducing our first project, Collatz, based on the Collatz conjecture. Having already completed this project in my Object Oriented Programming and Software engineering classes, completing this project was trivial. What makes this time different is the introduction of continuous integration with Travis CI.&lt;/p&gt;

&lt;p&gt;Tip of the week: When working on a project, worry less about which editor and or additional tools you are going to use and worry more about actually completing the project. You can always come back afterwards if time permits. Example: I wanted to write my code for this first project in an IDE instead of vim because I thought it would be easier and improve my productivity. After many frustrations trying to set up the IDE for my project, I was still at square one. I switched to what I knew and was able to finish the project quickly. I am not saying to avoid learning to use new IDE’s and tools but to consider your priorites when working on a project. If you spend all your time setting up the development environment and end up with no end result then some adjustments need to be made..&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Jun 2015 15:49:00 -0700</pubDate>
        <link>http://kevin-valle.github.io/2015/06/14/week1.html</link>
        <guid isPermaLink="true">http://kevin-valle.github.io/2015/06/14/week1.html</guid>
        
        
      </item>
    
  </channel>
</rss>
